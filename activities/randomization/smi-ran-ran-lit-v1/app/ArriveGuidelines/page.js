const logger = require('../../../../../packages/logging/logger.js');
'use client'
import React, { useState, useEffect } from 'react'
import {
  Box,
  Typography,
  Button,
  Paper,
  Container,
  CircularProgress,
  Tooltip,
  Accordion,
  AccordionSummary,
  AccordionDetails
} from '@mui/material'
import ExpandMoreIcon from '@mui/icons-material/ExpandMore' // Import the expand icon

export default function ComparisonScreen() {
  const [selectedSection, setSelectedSection] = useState('')
  const [studyData, setStudyData] = useState({
    original: {
      title: 'Study name',
      description:
        'This section contains the brief description of the study provided for this activity.',
    },
    revised: {
      title: 'Study name - revised',
      description:
        'This section contains the brief description of the study provided for this activity.',
    },
  })

  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState(null)
  const [categoryParams, setCategoryParams] = useState({
    '4a': '0',
    '4b': '0',
    '5': '0',
    '1b': '0',
    '2a': '0',
    other: '0',
  })

  // Add state for question counts
  const [questionCounts, setQuestionCounts] = useState({
    '4a': '0',
    '4b': '0',
    '5': '0',
    '1b': '0',
    '2a': '0',
    other: '0',
  })

  // Add state for accordion expansion
  const [expandedOriginal, setExpandedOriginal] = useState(false)
  const [expandedRevised, setExpandedRevised] = useState(false)

  // Handle accordion expansion toggle
  const handleToggleOriginal = () => {
    setExpandedOriginal(!expandedOriginal)
  }

  const handleToggleRevised = () => {
    setExpandedRevised(!expandedRevised)
  }

  // Categories for the ARRIVE guidelines - base structure with full names
  const guidelineCategories = [
    { id: '4a', title: '4a. Randomisation', fullName: 'Randomisation' },
    {
      id: '4b',
      title: '4b. Minimising confounders',
      fullName: 'Minimising confounders',
    },
    { id: '5', title: '5. Blinding', fullName: 'Blinding' },
    { id: '1b', title: '1b. Experimental unit', fullName: 'Experimental unit' },
    { id: '2a', title: '2a. Sample size', fullName: 'Sample size' },
  ]

  // Section-specific content with both highlighted paragraphs and non-highlighted connecting text
  const sectionSpecificContent = {
    '1': {
      // Exercise and cognitive inhibition
      intro: 'Based on sample size calculations, ',
      '2a': 'we will recruit a minimum of 30 participants',
      normal1:
        ' to this crossover randomized controlled trial. Each participant will experience some sequence of the four conditions: low–intensity resistance exercise (LRE), moderate–intensity resistance exercise (MRE), high–intensity resistance exercise (HRE), and control condition (Con). A Latin square design will be implemented to reduce the possible sequences from 24 (4 × 3 × 2 × 1) to 4 (1: Con → LRE → MRE → HRE; 2: LRE → MRE → HRE → Con; 3: MRE → HRE → Con → LRE; 4: HRE → Con → LRE → MRE) to control for the risk of imbalanced allocation.\nBlock randomization will be performed to ensure that each participant has an equal chance of assignment to each sequence and that each sequence contains a similar number of participants. ',
      '4a':
        'Random block sizes of 4 and 8 will be implemented to alleviate concerns about recruitment and allocation bias.',
      normal2: ' Random numbers will be ',
      '5':
        'generated by author XYZ and concealed by a researcher unaffiliated with the study.',
      normal3:
        ' XYZ will disclose the assigned individual sequence on the first intervention day (the third visit) to minimize recruitment and allocation biases.\nTo reduce the threat of the placebo effect, we will ask participants for their expectations on cognitive performance, and these will be incorporated into our statistical analysis. Blinding of the outcome assessors is also not possible. However, all measurements of cognitive performance will be computerized and not involve human judgment. The data analyzers will not be blinded but will follow a pre–written computer script for statistical analysis. These procedures will reduce the risk of bias arising from the lack of blinding of participants, experimenters, assessors, and data analyzers and the threat from researchers degrees of freedom.',
      '1b': '',
      normal4: '',
      '4b': '',
    },
    '2': {
      // Pharmaceuticals and spinal cord injury
      intro: 'The study is composed of 4 groups (Riluzole, Glibenclamide, GlyH-101, and Control). All animals, ',
      '1b': 'Sprague-Dawley rats will be ordered from Charles River,',
      normal1:
        ' will receive a spinal cord contusion injury at C5. All animals will receive a spinal cord contusion injury at C5. The severity of injury (weight height) will be block randomized between 5 and 25 mm to ensure injury severity is fully balanced across different treatment groups and by sex. Equal numbers of male and female animals will be included in each treatment group and injury severity. ',
      '4b':
        'Male and female rats will be paired for dual housing, with cage location counterbalanced',
      normal2:
        '.\nThe target sample size is n=30 animals per treatment group for a total of 120 animals for the full study. ',
      '5':
        'A technician unaffiliated with the study will issue random numeric tags for each rat',
      normal3:
        '. ',
      '4a':
        'During treatment allocation, the lowest 15 numbers in each sex group will be allocated to the first treatment (Riluzole), the second group of 15 to the second treatment (Glibenclamide) and so on.',
      normal4:
        ' We will use block randomization ',
      '4c': 'with a block size of 15',
      normal5: ', where each animal will be randomly assigned to 1 of 4 treatment groups and 1 of 15 injury severities (n=15 animals per treatment group per sex). The random number generator in MS Excel will be used.',
      '2a':
        'Sample size was calculated based on pilot data showing a standardized effect size of 0.85 in our primary outcome measure. For 80% power and α = 0.05, we determined 15 animals per group were required, with an additional 10% to account for potential losses.',
    },
    '3': {
      // Emotional processing in depression
      intro: `The study employs a between-group design with two factors, Medication (esketamine vs. placebo) and outcome expectation (high vs. low). Neural activity is measured by conducting an fMRI emotion processing paradigm.\nHuman subjects are randomized into one of the four experimental conditions (n= 4 x 44) `,
      '4a':
        'using a balanced randomization procedure using block randomization with block sizes randomly varying between 8, 16, and 32 participants',
      normal1:
        ' to ensure that the numbers of participants to be assigned to each of the comparison groups will be balanced. ',
      '4b':
        'The block size randomly varies to reduce the likelihood of foreknowledge of treatment assignment among those recruiting participants.',
      normal2:
        '\n',
      '5':
        'Subjects will not know the treatment group to which they have been assigned and personnel who interact directly with the study subjects will not be aware of the assigned treatments. (Commonly known as "double blind")',
      normal3:
        '\nIn total 176 patients with acute major depression disorder are recruited (n=4 x 36 + 20% estimated dropout rate)',
      '1b':
        'Each patient was considered an independent experimental unit, with all treatments administered and assessments performed at the individual level.',
      normal4:
        ' We tracked individual responses to emotional stimuli using standardized facial expression recognition tasks and self-reported emotional reactivity measures. ',
      '2a':
        'Sample size was determined based on previous studies investigating similar emotional processing outcomes. Power analysis indicated 45 participants per group would provide 85% power to detect a clinically meaningful difference with α = 0.05, accounting for an anticipated 15% dropout rate.',
    },
    default: {
      // Default placeholders
      intro:
        'This study has been revised to incorporate key methodological improvements based on ARRIVE guidelines.\n\n',
      '4a':
        'Randomisation methods were clearly described, including the method used to generate the random allocation sequence and any steps taken to conceal the sequence until interventions were assigned.\n\n',
      normal1:
        ' This approach ensures transparency and reproducibility of the study methods.\n\n',
      '4b':
        'Steps taken to minimize potential confounders were outlined, including standardization of experimental conditions and balancing of known confounding variables across groups.\n\n',
      normal2:
        ' These measures help isolate the effect of the intervention under investigation.\n\n',
      '5':
        'The study implemented appropriate blinding procedures for experimenters, participants, and/or outcome assessors, with clear documentation of who was blinded and how blinding was maintained.\n\n',
      normal3:
        ' This reduces the potential for bias in data collection and analysis.\n\n',
      '1b':
        'The experimental unit was explicitly defined, with clarity on whether measurements were taken from independent subjects or if multiple samples came from the same subject.\n\n',
      normal4:
        ' This precision allows for appropriate statistical analysis and interpretation.\n\n',
      '2a':
        'Sample size was determined using appropriate statistical methods, with clear rationale provided for the effect size, power level, and significance threshold used in calculations.\n\n',
    },
  }

  // Define study data for different sections
  const studySections = {
    '1': {
      original: {
        title:
          'Does exercise improve performance on cognitive inhibition tasks?',
        description: `Based on sample size calculations, we aim to recruit at least 30 participants to this crossover randomized controlled trial. Each participant will experience some sequence of the four conditions: low–intensity resistance exercise (LRE), moderate–intensity resistance exercise (MRE), high–intensity resistance exercise (HRE), and control condition (Con). A Latin square design will be implemented to reduce the possible sequences from 24 (4 × 3 × 2 × 1) to 4 (1: Con → LRE → MRE → HRE; 2: LRE → MRE → HRE → Con; 3: MRE → HRE → Con → LRE; 4: HRE → Con → LRE → MRE) to control for the risk of imbalanced allocation.\n\nBlock randomization will be performed to ensure that each participant has an equal chance of assignment to each sequence and that each sequence contains a similar number of participants. Random numbers will be generated and concealed by author XYZ. XYZ will disclose the assigned individual sequence on the first intervention day (the third visit) to minimize recruitment and allocation biases.\n\nTo reduce the threat of the placebo effect, we will ask participants for their expectations on cognitive performance, and these will be incorporated into our statistical analysis. Blinding of the outcome assessors is also not possible. However, all measurements of cognitive performance will be computerized and not involve human judgment. The data analyzers will not be blinded but will follow a pre–written computer script for statistical analysis. These procedures will reduce the risk of bias arising from the lack of blinding of participants, experimenters, assessors, and data analyzers and the threat from researchers degrees of freedom.`,
      },
      revised: {
        title:
          'Does exercise improve performance on cognitive inhibition tasks?',
        description:
          'Comprehensive analysis of cognitive functions in adults with focus on memory retention patterns.',
      },
    },
    '2': {
      original: {
        title:
          'Does early administration of pharmaceuticals improve neurological outcomes following spinal cord injury?',
        description: `The study is composed of 4 groups (Riluzole, Glibenclamide, GlyH-101, and Control). All animals will receive a spinal cord contusion injury at C5. The severity of injury (weight height) will be block randomized between 5 and 25 mm to ensure injury severity is fully balanced across different treatment groups and by sex. Equal numbers of male and female animals will be included in each treatment group and injury severity.\n\nThe target sample size is n=30 animals per treatment group for a total of 120 animals for the full study. We will use block randomization where each animal will be randomly assigned to 1 of 4 treatment groups and 1 of 15 injury severities (n=15 animals per treatment group per sex). The random number generator in MS Excel will be used.`,
      },
      revised: {
        title:
          'Does early administration of pharmaceuticals improve neurological outcomes following spinal cord injury?',
        description:
          'Longitudinal assessment of memory retention techniques across different age groups.',
      },
    },
    '3': {
      original: {
        title:
          'How is emotional processing of faces influenced by medication and expectations in patients with depression?',
        description: `The study employs a between-group design with two factors, Medication (esketamine vs. placebo) and outcome expectation (high vs. low). Neural activity is measured by conducting an fMRI emotion processing paradigm.\n\nHuman subjects are randomized into one of the four experimental conditions (n= 4 x 44), and ensuring that the numbers of participants to be assigned to each of the comparison groups will be balanced.\n\nIn total 176 patients with acute major depression disorder are recruited (n=4 x 36 + 20% estimated dropout rate)`,
      },
      revised: {
        title:
          'How is emotional processing of faces influenced by medication and expectations in patients with depression?',
        description:
          'Evaluation of attention span in different environmental conditions and stimuli.',
      },
    },
    default: {
      original: {
        title: 'Study name',
        description:
          'This section contains the brief description of the study provided for this activity.',
      },
      revised: {
        title: 'Study name - revised',
        description:
          'This section contains the brief description of the study provided for this activity.',
      },
    },
  }

  // Function to count the number of '0' parameter categories
  const countNotIncorporatedCategories = () => {
    return Object.entries(categoryParams).filter(
      ([key, value]) => key !== 'other' && value === '0',
    ).length
  }

  // Function to get list of not incorporated guideline names
  const getNotIncorporatedGuidelineNames = () => {
    return Object.entries(categoryParams)
      .filter(([key, value]) => key !== 'other' && value === '0')
      .map(([key]) => {
        const category = guidelineCategories.find((cat) => cat.id === key)
        return category ? category.fullName : key
      })
      .join(', ')
  }

  // Function to get study data based on selected section
  const getStudyDataForSection = (section) => {
    return studySections[section] || studySections['default']
  }

  // Define the order of sections for each study
  const sectionOrder = {
    '1': ['intro', '2a', 'normal1', '4a', 'normal2', '5', 'normal3'],
    '2': ['intro', '1b', 'normal1', '4b', 'normal2', '5', 'normal3', '4a', 'normal4', '4c', 'normal5'],
    '3': ['intro', '4a', 'normal1', '4b', 'normal2', '5', 'normal3'],
    default: [
      'intro',
      '4a',
      'normal1',
      '4b',
      'normal2',
      '5',
      'normal3',
      '1b',
      'normal4',
      '2a',
    ],
  }

  // Get the appropriate section order based on the selected section
  const getSectionOrderForSection = (section) => {
    return sectionOrder[section] || sectionOrder['default']
  }

  // Function to extract URL parameters and determine category values
  const getParamsFromUrl = () => {
    if (typeof window !== 'undefined') {
      const urlParams = new URLSearchParams(window.location.search)

      // Extract the original parameters
      const userId = urlParams.get('userId') || ''
      const sessionId = urlParams.get('sessionId') || ''

      // Extract the selectedSection parameter
      const section = urlParams.get('selectedSection') || ''

      // Extract category parameters - keep them as strings '0' or '1'
      const categories = {}
      guidelineCategories.forEach((cat) => {
        const paramValue = urlParams.get(`cat_${cat.id}`)
        categories[cat.id] = paramValue || '0'
      })

      // Extract question counts for each category
      const questionCounts = {}
      guidelineCategories.forEach((cat) => {
        const countValue = urlParams.get(`count_${cat.id}`)
        questionCounts[cat.id] = countValue || '0'
      })

      return {
        userId,
        sessionId,
        selectedSection: section,
        categories,
        questionCounts,
      }
    }
    return {
      userId: '',
      sessionId: '',
      selectedSection: '',
      categories: {
        '4a': '0',
        '4b': '0',
        '5': '0',
        '1b': '0',
        '2a': '0',
        other: '0',
      },
      questionCounts: {
        '4a': '0',
        '4b': '0',
        '5': '0',
        '1b': '0',
        '2a': '0',
        other: '0',
      },
    }
  }

  // Load page data
  useEffect(() => {
    try {
      setIsLoading(true)

      // Get URL parameters
      const params = getParamsFromUrl()
      logger.app.info('URL Parameters:', params)
      setCategoryParams(params.categories)
      setQuestionCounts(params.questionCounts)
      setSelectedSection(params.selectedSection)

      // Update both original and revised study data based on selectedSection
      const sectionData = getStudyDataForSection(params.selectedSection)
      setStudyData(sectionData)

      setIsLoading(false)
    } catch (err) {
      logger.app.error('Error loading comparison data:', err)
      setError(`Failed to load comparison data: ${err.message}`)
      setIsLoading(false)
    }
  }, [])

  // Function to navigate to the ARRIVE guidelines page
  const handleGoToArrive = () => {
    // Preserve all current URL parameters when navigating
    const currentUrl = new URL(window.location.href)
    window.location.href = `/arrive?${currentUrl.searchParams.toString()}`
  }

  // Get the appropriate content based on the selected section
  const getContentForSection = (section) => {
    return sectionSpecificContent[section] || sectionSpecificContent['default']
  }

  // Get tooltip text based on category and its parameter value
  const getTooltipText = (categoryId) => {
    const category = guidelineCategories.find((cat) => cat.id === categoryId)

    if (!category) return ''

    // Convert string parameter to a number for comparison
    const paramValue = parseInt(categoryParams[categoryId], 10)

    if (paramValue >= 1) {
      // Orange/red case - show the category name
      const count = questionCounts[categoryId] || '0'
      return `${category.title}`
    } else {
      // Pink case - show the not incorporated message with question count
      const notIncorporatedCount = countNotIncorporatedCategories()
      const guidelineNames = getNotIncorporatedGuidelineNames()
      const count = questionCounts[categoryId] || '0'

      return ` ${count} questions not incorporated in this revision.  The following guidelines were not needed to revise this study: ${guidelineNames}`
    }
  }

  // Render the highlighted text for all categories as a continuous paragraph
  const renderContinuousParagraph = () => {
    // Get the content specific to the selected section
    const sectionContent = getContentForSection(selectedSection)

    // Get the section order specific to the selected section
    const order = getSectionOrderForSection(selectedSection)

    // Map of category IDs to their highlight colors based on parameters
    const getHighlightStyle = (categoryId) => {
      return {
        padding: '2px 4px',
        backgroundColor:
          categoryParams[categoryId] === '0' ? '#F031DD' : '#FF5A00', // Pink or Orange/Red
        color: 'black',
        display: 'inline',
        cursor: 'help', // Show pointer cursor to indicate hoverable
      }
    }

    return (
      <Typography 
        variant="body1" 
        sx={{ 
          mb: 2,
          whiteSpace: 'pre-wrap', // Preserves whitespace and line breaks
        }}
      >
        {order.map((sectionKey, index) => {
          // Check if this is a highlight section (not intro or normalX)
          const isHighlightSection =
            !sectionKey.startsWith('intro') && !sectionKey.startsWith('normal')

          if (isHighlightSection && sectionContent[sectionKey]) {
            // Use the appropriate highlight style for this section and wrap with Tooltip
            return (
              <Tooltip
                key={index}
                title={getTooltipText(sectionKey)}
                arrow
                placement="top"
                PopperProps={{
                  modifiers: [
                    {
                      name: 'offset',
                      options: {
                        offset: [0, 0], // [skidding, distance] - zero offset to keep it exactly above
                      },
                    },
                    {
                      name: 'preventOverflow',
                      options: {
                        altAxis: true, // prevents overflow on both axes
                        boundariesElement: 'viewport',
                      },
                    },
                  ],
                }}
                followCursor={true} // This will make the tooltip follow the cursor position
              >
                <span style={getHighlightStyle(sectionKey)}>
                  {sectionContent[sectionKey]}
                </span>
              </Tooltip>
            )
          } else {
            // Regular non-highlighted text
            return <span key={index}>{sectionContent[sectionKey]}</span>
          }
        })}
      </Typography>
    )
  }

  return (
    <Container maxWidth="md" sx={{ py: 3 }}>
      <Box textAlign="left" mb={4}>
        <Typography variant="h4" component="h1" fontWeight="bold">
          Comparison
        </Typography>
        <Typography variant="h6" component="h2">
          Review the study. What changes have been made to meet the ARRIVE
          guidelines?
        </Typography>
      </Box>

      {isLoading ? (
        <Box
          sx={{
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            height: '300px',
            flexDirection: 'column',
          }}
        >
          <CircularProgress size={40} sx={{ mb: 2 }} />
          <Typography>Loading comparison data...</Typography>
        </Box>
      ) : error ? (
        <Box
          sx={{
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            height: '300px',
            flexDirection: 'column',
            color: 'error.main',
          }}
        >
          <Typography>{error}</Typography>
          <Button
            variant="contained"
            sx={{ mt: 2 }}
            onClick={() => window.location.reload()}
          >
            Retry
          </Button>
        </Box>
      ) : (
        <>
          {/* Original Study Accordion */}
          <Accordion 
            expanded={expandedOriginal} 
            onChange={handleToggleOriginal}
            sx={{
              mb: 2,
              backgroundColor: '#E0E0E0',
              borderRadius: '4px !important', // Force border radius even when expanded
              '&:before': {
                display: 'none', // Remove the default divider
              },
            }}
          >
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              aria-controls="original-study-content"
              id="original-study-header"
              sx={{
                borderRadius: expandedOriginal ? '4px 4px 0 0' : 4,
              }}
            >
              <Typography variant="h5" component="h3" fontWeight="bold">
                {studyData.original.title}
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography
                variant="body1"
                sx={{
                  wordBreak: 'break-word',
                  whiteSpace: 'pre-wrap',
                }}
              >
                {studyData.original.description}
              </Typography>
            </AccordionDetails>
          </Accordion>

          {/* Revised Study Accordion */}
          <Accordion 
            expanded={expandedRevised} 
            onChange={handleToggleRevised}
            sx={{
              mb: 4,
              backgroundColor: '#E0E0E0',
              borderRadius: '4px !important', // Force border radius even when expanded
              '&:before': {
                display: 'none', // Remove the default divider
              },
            }}
          >
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              aria-controls="revised-study-content"
              id="revised-study-header"
              sx={{
                borderRadius: expandedRevised ? '4px 4px 0 0' : 4,
              }}
            >
              <Typography variant="h5" component="h3" fontWeight="bold">
                {studyData.revised.title} - Revised
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              {/* Render the continuous paragraph with all categories */}
              {renderContinuousParagraph()}
            </AccordionDetails>
          </Accordion>
        </>
      )}
    </Container>
  )
}